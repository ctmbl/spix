#!/usr/bin/python3.9 -i

import xmlrpc.client

def sHelp():
    print("[+] Available Methods:")
    for method in s.system.listMethods():
        print("\t",method)
    print("example:   >>> s.mouseClick('mainWindow/button00')") 
    spix(None)
    return

def spixHelp():
    sHelp()

def help():
    sHelp()

def spix(cmd):
    if cmd == None:
        print("help   :   >>> help()|sHelp()|spixHelp()    // to print help") 
        print("help   :   >>> spix('<command>|all|func')   // to display <command> help|examples|useful functions") 
        print("help   :   >>> cd('path/to/item')           // to change current_item (see pwd())") 
        return
    if cmd == "all":
        print("help:  List of methods and their signatures")
        for method in s.system.listMethods():
            print("\t- ",f"{method:20s}", " : ", end="")
            spix(method)
        return
    if cmd == "func":
        print("help:  List of useful functionalities")
        print("\t- pwd()                          : return current item position")
        print("\t- cd('path/to/item|../../item')  : change current item position")
        print("\t- ls(<empty>|'relative/path')    : list item children")
        print("\t- lsa(<empty>|'relative/path')   : list item children and their children")
        print("\t- c(<empty>|'relative/path')     : click on specified (or current if not) item")
        print("\t- get(prop, path='', no_check=False)         : get property 'prop' of item at 'path'; path is optional (pwd() by default); no_check optional")
        print("\t- set(prop, value, path='', no_check=False)  : set property 'prop' of item at 'path' at value 'value'; path is optional (pwd() by default); no_check optional")
        return
    try:
        print(s.system.methodHelp(cmd))
    except xmlrpc.client.Fault:
        print("[-] Unknown method name from anyRPC")

# Wrappers
current_path = []

def handle_rel_path(rel_path,temp_path, no_check=False):
    rel_path = rel_path.split("/")
    rel_path = [e for e in rel_path if e]
    rel_path = rel_path[::-1]
    while rel_path:
        p=rel_path.pop()
        if p == "..":
            if temp_path:
               temp_path.pop()
            else: 
                print("[+] already at root")
            continue
        if s.existsAndVisible(pwd(temp_path)+"/"+p) or no_check:
            temp_path.append(p)        
        else:
            print("[-]",p,"at path='" + pwd(temp_path) + "' is inaccessible")
            print("[-] cutting your path after '"+p+"' ;", rel_path[::-1],"not taken into account")
            break

def cd(rel_path):
    global current_path
    handle_rel_path(rel_path,current_path)
    
def pwd(path=current_path):
    return "/".join(path)


def methods_wrapper(path,func, prop=None, value=None, no_check=False):
    if path:
        temp_path = current_path[:]
        handle_rel_path(path,temp_path, no_check=no_check)
        path = pwd(temp_path)
        if not path:
            print("[-] CAUTION: this relative path lead to empty path")
            return
    else:
        path = pwd()
        if not path:
            print("[-] CAUTION: pwd() is empty !")
            return
    if path:
        if prop:
            if value:
                func(path, prop, value)
                return
            func(path, prop)
            return
        func(path)

def ls(path=""):
    methods_wrapper(path, s.list)

def lsa(path=""):
    methods_wrapper(path, s.listAll)

def c(path=""):
    methods_wrapper(path, s.mouseClick)

def get(prop, path="",no_check=False):
    methods_wrapper(path, s.getStringProperty, prop, no_check=no_check)

def set(prop, value, path="",no_check=False):
    methods_wrapper(path, s.setStringProperty, prop, value, no_check=no_check)

def screen(img_path, path=""):
    img_format = [".png",".bmp",".gif",".jpg"]
    if not img_path[-4:] in img_format:
        print("[-] can't take screenshot, add one of these extension:",img_format)
        return
    methods_wrapper(path,s.takeScreenshot,img_path)

s = xmlrpc.client.ServerProxy('http://localhost:9000')
sHelp()


